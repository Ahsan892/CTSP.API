// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using CTSP.API.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace CTSP.API.Data
{
    public partial class CTSPRecruiterContext
    {
        private ICTSPRecruiterContextProcedures _procedures;

        public virtual ICTSPRecruiterContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new CTSPRecruiterContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ICTSPRecruiterContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Spr_AcademicResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_AcceptedRejectedListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_AreaResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Spr_CertificateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_CityResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_CountryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_DashBoardResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_DistrictResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_DivisionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_DropDownsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Spr_ExperienceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_GetUsersinfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_LoginIssueResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_PostApplyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_PostApply_backupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_PrintDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_PrintRollnoSlipResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_ProvinceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Spr_QCAcademicResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_QCAddQueryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_QCBatchResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_QCJobStatuUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_QCJobStatuUser_05_04_2023Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_QCJobStatuUser_bkResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_QCResultsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_QCReviewResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_QCReviewJobStatuUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_QCUsersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_QCViewSubmitResultsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_QCViewSubmitResults_backupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_QCViewSubmitResults_lastbackupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_RollSlipResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_TbUsersProfileResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_TehsilResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_TermsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_UCResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_UserPostingViewResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_UsersDoucmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_UsersinfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_UserWithProfileResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_UserWithProfilePicOnlyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_ViewDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPR_ViewQCPrintDataResult>().HasNoKey().ToView(null);
        }
    }

    public partial class CTSPRecruiterContextProcedures : ICTSPRecruiterContextProcedures
    {
        private readonly CTSPRecruiterContext _context;

        public CTSPRecruiterContextProcedures(CTSPRecruiterContext context)
        {
            _context = context;
        }

        public virtual async Task<List<Spr_AcademicResult>> Spr_AcademicAsync(byte? opcode, byte? isRedirect, short? TypeID, long? UserAID, long? UserID, string IQuery, string DQuery, string UQuery, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isRedirect",
                    Value = isRedirect ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "TypeID",
                    Value = TypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserAID",
                    Value = UserAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "IQuery",
                    Size = -1,
                    Value = IQuery ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DQuery",
                    Size = -1,
                    Value = DQuery ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UQuery",
                    Size = -1,
                    Value = UQuery ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Spr_AcademicResult>("EXEC @returnValue = [dbo].[Spr_Academic] @opcode, @isRedirect, @TypeID, @UserAID, @UserID, @IQuery, @DQuery, @UQuery", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_AcceptedRejectedListResult>> SPR_AcceptedRejectedListAsync(string WhereID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WhereID",
                    Size = 70,
                    Value = WhereID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_AcceptedRejectedListResult>("EXEC @returnValue = [dbo].[SPR_AcceptedRejectedList] @WhereID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_AreaResult>> SPR_AreaAsync(byte? opcode, int? WhereID, int? WhereID2, int? SelValID, string UCCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "WhereID",
                    Value = WhereID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WhereID2",
                    Value = WhereID2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SelValID",
                    Value = SelValID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UCCode",
                    Size = 30,
                    Value = UCCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_AreaResult>("EXEC @returnValue = [dbo].[SPR_Area] @opcode, @WhereID, @WhereID2, @SelValID, @UCCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Spr_CertificateResult>> Spr_CertificateAsync(byte? opcode, short? CertificateID, string Certificate, bool? TypeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "CertificateID",
                    Value = CertificateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Certificate",
                    Size = 120,
                    Value = Certificate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TypeID",
                    Value = TypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Spr_CertificateResult>("EXEC @returnValue = [dbo].[Spr_Certificate] @opcode, @CertificateID, @Certificate, @TypeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_CityResult>> SPR_CityAsync(byte? opcode, short? CityID, string City, short? UCID, short? Search_UCID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "CityID",
                    Value = CityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 150,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UCID",
                    Value = UCID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Search_UCID",
                    Value = Search_UCID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_CityResult>("EXEC @returnValue = [dbo].[SPR_City] @opcode, @CityID, @City, @UCID, @Search_UCID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_CountryResult>> SPR_CountryAsync(byte? opcode, short? CountryID, string Country, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "CountryID",
                    Value = CountryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Country",
                    Size = 50,
                    Value = Country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_CountryResult>("EXEC @returnValue = [dbo].[SPR_Country] @opcode, @CountryID, @Country", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_DashBoardResult>> SPR_DashBoardAsync(int? OpCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OpCode",
                    Value = OpCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_DashBoardResult>("EXEC @returnValue = [dbo].[SPR_DashBoard] @OpCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_DistrictResult>> SPR_DistrictAsync(byte? opcode, short? DistrictID, string District, short? DivisionID, short? Search_DivID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "DistrictID",
                    Value = DistrictID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "District",
                    Size = 120,
                    Value = District ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DivisionID",
                    Value = DivisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Search_DivID",
                    Value = Search_DivID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_DistrictResult>("EXEC @returnValue = [dbo].[SPR_District] @opcode, @DistrictID, @District, @DivisionID, @Search_DivID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_DivisionResult>> SPR_DivisionAsync(byte? opcode, short? DivisionID, string Division, short? ProvinceID, short? Search_ProvinceID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "DivisionID",
                    Value = DivisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Division",
                    Size = 120,
                    Value = Division ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvinceID",
                    Value = ProvinceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Search_ProvinceID",
                    Value = Search_ProvinceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_DivisionResult>("EXEC @returnValue = [dbo].[SPR_Division] @opcode, @DivisionID, @Division, @ProvinceID, @Search_ProvinceID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_DropDownsResult>> SPR_DropDownsAsync(byte? opcode, long? UserID, string WhereID, long? PostsID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "WhereID",
                    Size = 150,
                    Value = WhereID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PostsID",
                    Value = PostsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_DropDownsResult>("EXEC @returnValue = [dbo].[SPR_DropDowns] @opcode, @UserID, @WhereID, @PostsID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Spr_ExperienceResult>> Spr_ExperienceAsync(byte? opcode, long? ExpID, long? UserID, byte? OrgTYPEID, byte? Search_OrgTypeID, string Company, string Designation, DateTime? StartDate, DateTime? EndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "ExpID",
                    Value = ExpID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OrgTYPEID",
                    Value = OrgTYPEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "Search_OrgTypeID",
                    Value = Search_OrgTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "Company",
                    Size = 150,
                    Value = Company ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Designation",
                    Size = 150,
                    Value = Designation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Spr_ExperienceResult>("EXEC @returnValue = [dbo].[Spr_Experience] @opcode, @ExpID, @UserID, @OrgTYPEID, @Search_OrgTypeID, @Company, @Designation, @StartDate, @EndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_GetUsersinfoResult>> SPR_GetUsersinfoAsync(string CNIC, string CellNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CNIC",
                    Size = 13,
                    Value = CNIC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CellNo",
                    Size = 15,
                    Value = CellNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_GetUsersinfoResult>("EXEC @returnValue = [dbo].[SPR_GetUsersinfo] @CNIC, @CellNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SPR_JobTermsVerifyAsync(long? UserJID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SPR_JobTermsVerify] @UserJID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_LoginIssueResult>> SPR_LoginIssueAsync(long? OpCode, string CNIC, string Password, string CellNo, long? UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OpCode",
                    Value = OpCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CNIC",
                    Size = 50,
                    Value = CNIC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 50,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CellNo",
                    Size = 50,
                    Value = CellNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_LoginIssueResult>("EXEC @returnValue = [dbo].[SPR_LoginIssue] @OpCode, @CNIC, @Password, @CellNo, @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_PostApplyResult>> SPR_PostApplyAsync(byte? opcode, int? WhereID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "WhereID",
                    Value = WhereID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_PostApplyResult>("EXEC @returnValue = [dbo].[SPR_PostApply] @opcode, @WhereID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_PostApply_backupResult>> SPR_PostApply_backupAsync(byte? opcode, int? WhereID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "WhereID",
                    Value = WhereID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_PostApply_backupResult>("EXEC @returnValue = [dbo].[SPR_PostApply_backup] @opcode, @WhereID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_PrintDataResult>> SPR_PrintDataAsync(byte? opcode, int? UserJID, int? UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_PrintDataResult>("EXEC @returnValue = [dbo].[SPR_PrintData] @opcode, @UserJID, @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_PrintRollnoSlipResult>> SPR_PrintRollnoSlipAsync(long? UserJID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_PrintRollnoSlipResult>("EXEC @returnValue = [dbo].[SPR_PrintRollnoSlip] @UserJID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_ProvinceResult>> SPR_ProvinceAsync(byte? opcode, short? ProvinceID, string Province, short? CountryID, short? Search_CID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "ProvinceID",
                    Value = ProvinceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Province",
                    Size = 120,
                    Value = Province ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CountryID",
                    Value = CountryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Search_CID",
                    Value = Search_CID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_ProvinceResult>("EXEC @returnValue = [dbo].[SPR_Province] @opcode, @ProvinceID, @Province, @CountryID, @Search_CID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public Task<List<SPR_ProvinceResult>> SPR_ProvinceAsync(int? opcode, int? ProvinceID, string Province, int? CountryID, short? Search_CID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        public virtual async Task<List<Spr_QCAcademicResult>> Spr_QCAcademicAsync(short? TypeID, long? UserID, string IQuery, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TypeID",
                    Value = TypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "IQuery",
                    Size = -1,
                    Value = IQuery ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Spr_QCAcademicResult>("EXEC @returnValue = [dbo].[Spr_QCAcademic] @TypeID, @UserID, @IQuery", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_QCAddQueryResult>> SPR_QCAddQueryAsync(long? UserJID, long? QUserJID, string IQuery, string Query, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "QUserJID",
                    Value = QUserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "IQuery",
                    Size = -1,
                    Value = IQuery ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Query",
                    Size = 550,
                    Value = Query ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_QCAddQueryResult>("EXEC @returnValue = [dbo].[SPR_QCAddQuery] @UserJID, @QUserJID, @IQuery, @Query", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_QCBatchResult>> SPR_QCBatchAsync(byte? opcode, short? QBID, string Title, long? StartRange, long? endRange, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "QBID",
                    Value = QBID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 250,
                    Value = Title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartRange",
                    Value = StartRange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "endRange",
                    Value = endRange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_QCBatchResult>("EXEC @returnValue = [dbo].[SPR_QCBatch] @opcode, @QBID, @Title, @StartRange, @endRange", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_QCJobStatuUserResult>> SPR_QCJobStatuUserAsync(long? UserJID, long? VerifiedBy, string TrackingNo, string TracingNo, byte? PayMethodID, bool? JobStatusid, string Remarks, string IQuery, double? ProfMarks, double? AcadMarks, short? District, short? UCName, short? TehsilName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VerifiedBy",
                    Value = VerifiedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TrackingNo",
                    Size = 150,
                    Value = TrackingNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TracingNo",
                    Size = 150,
                    Value = TracingNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PayMethodID",
                    Value = PayMethodID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "JobStatusid",
                    Value = JobStatusid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Remarks",
                    Size = 250,
                    Value = Remarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IQuery",
                    Size = -1,
                    Value = IQuery ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProfMarks",
                    Value = ProfMarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "AcadMarks",
                    Value = AcadMarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "District",
                    Value = District ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UCName",
                    Value = UCName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "TehsilName",
                    Value = TehsilName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_QCJobStatuUserResult>("EXEC @returnValue = [dbo].[SPR_QCJobStatuUser] @UserJID, @VerifiedBy, @TrackingNo, @TracingNo, @PayMethodID, @JobStatusid, @Remarks, @IQuery, @ProfMarks, @AcadMarks, @District, @UCName, @TehsilName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_QCJobStatuUser_05_04_2023Result>> SPR_QCJobStatuUser_05_04_2023Async(long? UserJID, long? VerifiedBy, string TrackingNo, string TracingNo, byte? PayMethodID, bool? JobStatusid, string Remarks, string IQuery, double? ProfMarks, double? AcadMarks, short? District, short? UCName, short? TehsilName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VerifiedBy",
                    Value = VerifiedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TrackingNo",
                    Size = 150,
                    Value = TrackingNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TracingNo",
                    Size = 150,
                    Value = TracingNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PayMethodID",
                    Value = PayMethodID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "JobStatusid",
                    Value = JobStatusid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Remarks",
                    Size = 250,
                    Value = Remarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IQuery",
                    Size = -1,
                    Value = IQuery ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProfMarks",
                    Value = ProfMarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "AcadMarks",
                    Value = AcadMarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "District",
                    Value = District ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UCName",
                    Value = UCName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "TehsilName",
                    Value = TehsilName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_QCJobStatuUser_05_04_2023Result>("EXEC @returnValue = [dbo].[SPR_QCJobStatuUser_05_04_2023] @UserJID, @VerifiedBy, @TrackingNo, @TracingNo, @PayMethodID, @JobStatusid, @Remarks, @IQuery, @ProfMarks, @AcadMarks, @District, @UCName, @TehsilName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_QCJobStatuUser_bkResult>> SPR_QCJobStatuUser_bkAsync(long? UserJID, long? VerifiedBy, string TrackingNo, string TracingNo, byte? PayMethodID, bool? JobStatusid, string Remarks, string IQuery, double? ProfMarks, double? AcadMarks, short? District, short? UCName, short? TehsilName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VerifiedBy",
                    Value = VerifiedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TrackingNo",
                    Size = 150,
                    Value = TrackingNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TracingNo",
                    Size = 150,
                    Value = TracingNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PayMethodID",
                    Value = PayMethodID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "JobStatusid",
                    Value = JobStatusid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Remarks",
                    Size = 250,
                    Value = Remarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IQuery",
                    Size = -1,
                    Value = IQuery ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProfMarks",
                    Value = ProfMarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "AcadMarks",
                    Value = AcadMarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "District",
                    Value = District ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UCName",
                    Value = UCName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "TehsilName",
                    Value = TehsilName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_QCJobStatuUser_bkResult>("EXEC @returnValue = [dbo].[SPR_QCJobStatuUser_bk] @UserJID, @VerifiedBy, @TrackingNo, @TracingNo, @PayMethodID, @JobStatusid, @Remarks, @IQuery, @ProfMarks, @AcadMarks, @District, @UCName, @TehsilName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_QCResultsResult>> SPR_QCResultsAsync(long? UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_QCResultsResult>("EXEC @returnValue = [dbo].[SPR_QCResults] @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_QCReviewResult>> SPR_QCReviewAsync(int? PostsID, short? Statusid, DateTime? FromDate, DateTime? ToDate, string Search, string SearchWhere, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PostsID",
                    Value = PostsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Statusid",
                    Value = Statusid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Search",
                    Size = 100,
                    Value = Search ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchWhere",
                    Size = 100,
                    Value = SearchWhere ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_QCReviewResult>("EXEC @returnValue = [dbo].[SPR_QCReview] @PostsID, @Statusid, @FromDate, @ToDate, @Search, @SearchWhere", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_QCReviewJobStatuUserResult>> SPR_QCReviewJobStatuUserAsync(long? UserJID, long? VerifiedBy, string TrackingNo, string TracingNo, byte? PayMethodID, bool? JobStatusid, string Remarks, string IQuery, double? ProfMarks, double? AcadMarks, short? District, short? UCName, short? TehsilName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VerifiedBy",
                    Value = VerifiedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TrackingNo",
                    Size = 150,
                    Value = TrackingNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TracingNo",
                    Size = 150,
                    Value = TracingNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PayMethodID",
                    Value = PayMethodID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "JobStatusid",
                    Value = JobStatusid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Remarks",
                    Size = 250,
                    Value = Remarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IQuery",
                    Size = -1,
                    Value = IQuery ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProfMarks",
                    Value = ProfMarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "AcadMarks",
                    Value = AcadMarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "District",
                    Value = District ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UCName",
                    Value = UCName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "TehsilName",
                    Value = TehsilName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_QCReviewJobStatuUserResult>("EXEC @returnValue = [dbo].[SPR_QCReviewJobStatuUser] @UserJID, @VerifiedBy, @TrackingNo, @TracingNo, @PayMethodID, @JobStatusid, @Remarks, @IQuery, @ProfMarks, @AcadMarks, @District, @UCName, @TehsilName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SPR_QcReviewStatusAsync(long? UserJID, string ReplyQuery, short? Statusid, long? Modifiedby, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReplyQuery",
                    Size = 550,
                    Value = ReplyQuery ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Statusid",
                    Value = Statusid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Modifiedby",
                    Value = Modifiedby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SPR_QcReviewStatus] @UserJID, @ReplyQuery, @Statusid, @Modifiedby", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SPR_QCTracingTransferAsync(byte? opcode, long? UserJID, string TracingNo, string FromTracingNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TracingNo",
                    Size = 150,
                    Value = TracingNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromTracingNo",
                    Size = 150,
                    Value = FromTracingNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SPR_QCTracingTransfer] @opcode, @UserJID, @TracingNo, @FromTracingNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SPR_QCUserAsync(byte? OpCode, long? UserPID, long? UserID, byte? RelationShipID, string FHName, string FcellNo, string CNIC, string Pic, DateTime? DOB, byte? GENDerid, bool? MaritalStatus, short? CityID, short? DistrictID, short? TehsilID, bool? Religion, string OtherReligion, bool? isHafizQuran, bool? isDisable, bool? isCAgeRelax, bool? isLocked, string UserName, string UserPassword, string FullName, string CellNo, string Address, string Email, bool? StatusID, byte? RoleID, string PostalAddress, bool? isGovtEmp, DateTime? GovtDofJoin, bool? isEduDept, DateTime? EduDofJoin, string CityName, string UCName, string TehsilName, string District, string DisablitySource, bool? isRedirect, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OpCode",
                    Value = OpCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserPID",
                    Value = UserPID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RelationShipID",
                    Value = RelationShipID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "FHName",
                    Size = 120,
                    Value = FHName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FcellNo",
                    Size = 15,
                    Value = FcellNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CNIC",
                    Size = 15,
                    Value = CNIC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pic",
                    Size = 50,
                    Value = Pic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "GENDerid",
                    Value = GENDerid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "MaritalStatus",
                    Value = MaritalStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CityID",
                    Value = CityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "DistrictID",
                    Value = DistrictID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "TehsilID",
                    Value = TehsilID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Religion",
                    Value = Religion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "OtherReligion",
                    Size = 50,
                    Value = OtherReligion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isHafizQuran",
                    Value = isHafizQuran ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isDisable",
                    Value = isDisable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isCAgeRelax",
                    Value = isCAgeRelax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isLocked",
                    Value = isLocked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 70,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserPassword",
                    Size = 70,
                    Value = UserPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FullName",
                    Size = 120,
                    Value = FullName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CellNo",
                    Size = 15,
                    Value = CellNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address",
                    Size = 150,
                    Value = Address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 150,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusID",
                    Value = StatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "RoleID",
                    Value = RoleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "PostalAddress",
                    Size = 150,
                    Value = PostalAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isGovtEmp",
                    Value = isGovtEmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GovtDofJoin",
                    Value = GovtDofJoin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "isEduDept",
                    Value = isEduDept ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EduDofJoin",
                    Value = EduDofJoin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "CityName",
                    Size = 150,
                    Value = CityName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UCName",
                    Size = 150,
                    Value = UCName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TehsilName",
                    Size = 150,
                    Value = TehsilName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "District",
                    Size = 150,
                    Value = District ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DisablitySource",
                    Size = 150,
                    Value = DisablitySource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isRedirect",
                    Value = isRedirect ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SPR_QCUser] @OpCode, @UserPID, @UserID, @RelationShipID, @FHName, @FcellNo, @CNIC, @Pic, @DOB, @GENDerid, @MaritalStatus, @CityID, @DistrictID, @TehsilID, @Religion, @OtherReligion, @isHafizQuran, @isDisable, @isCAgeRelax, @isLocked, @UserName, @UserPassword, @FullName, @CellNo, @Address, @Email, @StatusID, @RoleID, @PostalAddress, @isGovtEmp, @GovtDofJoin, @isEduDept, @EduDofJoin, @CityName, @UCName, @TehsilName, @District, @DisablitySource, @isRedirect", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_QCUsersResult>> SPR_QCUsersAsync(byte? opcode, long? UserID, string UserName, string Password, string FullName, string CellNo, bool? StatusID, byte? ShiftID, short? QBID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 70,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 70,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FullName",
                    Size = 120,
                    Value = FullName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CellNo",
                    Size = 15,
                    Value = CellNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusID",
                    Value = StatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ShiftID",
                    Value = ShiftID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "QBID",
                    Value = QBID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_QCUsersResult>("EXEC @returnValue = [dbo].[SPR_QCUsers] @opcode, @UserID, @UserName, @Password, @FullName, @CellNo, @StatusID, @ShiftID, @QBID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_QCViewSubmitResultsResult>> SPR_QCViewSubmitResultsAsync(long? UserJID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_QCViewSubmitResultsResult>("EXEC @returnValue = [dbo].[SPR_QCViewSubmitResults] @UserJID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_QCViewSubmitResults_backupResult>> SPR_QCViewSubmitResults_backupAsync(long? UserJID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_QCViewSubmitResults_backupResult>("EXEC @returnValue = [dbo].[SPR_QCViewSubmitResults_backup] @UserJID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_QCViewSubmitResults_lastbackupResult>> SPR_QCViewSubmitResults_lastbackupAsync(long? UserJID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_QCViewSubmitResults_lastbackupResult>("EXEC @returnValue = [dbo].[SPR_QCViewSubmitResults_lastbackup] @UserJID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_RollSlipResult>> SPR_RollSlipAsync(string WhereID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WhereID",
                    Size = 70,
                    Value = WhereID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_RollSlipResult>("EXEC @returnValue = [dbo].[SPR_RollSlip] @WhereID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SPR_SingleLoopupAsync(byte? opcode, long? PrimaryIDVal, string PrimaryNameVal, string PrimaryID, string Field, string TableName, string SecTableName, int? IsExists, string SQL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "PrimaryIDVal",
                    Value = PrimaryIDVal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PrimaryNameVal",
                    Size = 250,
                    Value = PrimaryNameVal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PrimaryID",
                    Size = 250,
                    Value = PrimaryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Field",
                    Size = 250,
                    Value = Field ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 250,
                    Value = TableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SecTableName",
                    Size = 250,
                    Value = SecTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsExists",
                    Value = IsExists ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQL",
                    Size = 1100,
                    Value = SQL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SPR_SingleLoopup] @opcode, @PrimaryIDVal, @PrimaryNameVal, @PrimaryID, @Field, @TableName, @SecTableName, @IsExists, @SQL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_TbUsersProfileResult>> SPR_TbUsersProfileAsync(byte? opcode, long? UserPID, long? UserID, long? Search_UserID, byte? RelationShipID, byte? Search_RelShipID, string FHName, string FcellNo, string CNIC, string CNICFPic, string CNICBPic, string Pic, DateTime? DOB, byte? Genderid, bool? MaritalStatus, short? CityID, short? Search_CityID, bool? Religion, string OtherReligion, bool? isHafizQuran, bool? isDisable, bool? isCAgeRelax, bool? isLocked, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserPID",
                    Value = UserPID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Search_UserID",
                    Value = Search_UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RelationShipID",
                    Value = RelationShipID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "Search_RelShipID",
                    Value = Search_RelShipID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "FHName",
                    Size = 120,
                    Value = FHName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FcellNo",
                    Size = 15,
                    Value = FcellNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CNIC",
                    Size = 15,
                    Value = CNIC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CNICFPic",
                    Size = 50,
                    Value = CNICFPic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CNICBPic",
                    Size = 50,
                    Value = CNICBPic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pic",
                    Size = 50,
                    Value = Pic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Genderid",
                    Value = Genderid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "MaritalStatus",
                    Value = MaritalStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CityID",
                    Value = CityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Search_CityID",
                    Value = Search_CityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Religion",
                    Value = Religion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "OtherReligion",
                    Size = 50,
                    Value = OtherReligion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isHafizQuran",
                    Value = isHafizQuran ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isDisable",
                    Value = isDisable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isCAgeRelax",
                    Value = isCAgeRelax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isLocked",
                    Value = isLocked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_TbUsersProfileResult>("EXEC @returnValue = [dbo].[SPR_TbUsersProfile] @opcode, @UserPID, @UserID, @Search_UserID, @RelationShipID, @Search_RelShipID, @FHName, @FcellNo, @CNIC, @CNICFPic, @CNICBPic, @Pic, @DOB, @Genderid, @MaritalStatus, @CityID, @Search_CityID, @Religion, @OtherReligion, @isHafizQuran, @isDisable, @isCAgeRelax, @isLocked", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_TehsilResult>> SPR_TehsilAsync(byte? opcode, short? TehsilID, string Tehsil, short? DistrictID, short? Search_DistID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "TehsilID",
                    Value = TehsilID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Tehsil",
                    Size = 120,
                    Value = Tehsil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DistrictID",
                    Value = DistrictID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Search_DistID",
                    Value = Search_DistID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_TehsilResult>("EXEC @returnValue = [dbo].[SPR_Tehsil] @opcode, @TehsilID, @Tehsil, @DistrictID, @Search_DistID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_TermsResult>> SPR_TermsAsync(byte? opcode, long? UserID, string Terms, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Terms",
                    Size = -1,
                    Value = Terms ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_TermsResult>("EXEC @returnValue = [dbo].[SPR_Terms] @opcode, @UserID, @Terms", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SPR_TermsVerifyAsync(long? UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SPR_TermsVerify] @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SPR_twoLoopupAsync(byte? opcode, string PrimaryID, long? PrimaryIDVal, string Field1, string Field1Val, string Field2, string Field2Val, string TableName, string SecTableName, int? IsExists, string SQL, bool? isField2key, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "PrimaryID",
                    Size = 250,
                    Value = PrimaryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PrimaryIDVal",
                    Value = PrimaryIDVal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Field1",
                    Size = 250,
                    Value = Field1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Field1Val",
                    Size = 250,
                    Value = Field1Val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Field2",
                    Size = 250,
                    Value = Field2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Field2Val",
                    Size = 250,
                    Value = Field2Val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 250,
                    Value = TableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SecTableName",
                    Size = 250,
                    Value = SecTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsExists",
                    Value = IsExists ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQL",
                    Size = 1100,
                    Value = SQL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isField2key",
                    Value = isField2key ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SPR_twoLoopup] @opcode, @PrimaryID, @PrimaryIDVal, @Field1, @Field1Val, @Field2, @Field2Val, @TableName, @SecTableName, @IsExists, @SQL, @isField2key", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_UCResult>> SPR_UCAsync(byte? opcode, short? UCID, string UCName, short? TehsilID, short? Search_TehsilID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UCID",
                    Value = UCID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UCName",
                    Size = 80,
                    Value = UCName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TehsilID",
                    Value = TehsilID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Search_TehsilID",
                    Value = Search_TehsilID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_UCResult>("EXEC @returnValue = [dbo].[SPR_UC] @opcode, @UCID, @UCName, @TehsilID, @Search_TehsilID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SPR_UpdateUsersinfoAsync(long? UserID, string Password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 50,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SPR_UpdateUsersinfo] @UserID, @Password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_UserPostingViewResult>> SPR_UserPostingViewAsync(long? OpCode, string CNIC, long? UserJID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OpCode",
                    Value = OpCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CNIC",
                    Size = 150,
                    Value = CNIC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_UserPostingViewResult>("EXEC @returnValue = [dbo].[SPR_UserPostingView] @OpCode, @CNIC, @UserJID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SPR_UserregAsync(byte? OpCode, string CNIC, string UserPassword, string FullName, string CellNo, string Address, string Email, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OpCode",
                    Value = OpCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "CNIC",
                    Size = 15,
                    Value = CNIC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserPassword",
                    Size = 70,
                    Value = UserPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FullName",
                    Size = 120,
                    Value = FullName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CellNo",
                    Size = 15,
                    Value = CellNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address",
                    Size = 150,
                    Value = Address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 150,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SPR_Userreg] @OpCode, @CNIC, @UserPassword, @FullName, @CellNo, @Address, @Email", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_UsersDoucmentResult>> SPR_UsersDoucmentAsync(int? opcode, long? UserID, string Attachment, byte? TypeID, string Title, string SQL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Attachment",
                    Size = 500,
                    Value = Attachment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TypeID",
                    Value = TypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 500,
                    Value = Title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SQL",
                    Size = 4000,
                    Value = SQL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_UsersDoucmentResult>("EXEC @returnValue = [dbo].[SPR_UsersDoucment] @opcode, @UserID, @Attachment, @TypeID, @Title, @SQL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_UsersinfoResult>> SPR_UsersinfoAsync(long? opcode, byte? RoleID, long? UserID, string WhereField1, string WhereField2, string WhereField3, string WhereField4, string WhereField5, string Menu, string WhereField6, string WhereField7, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RoleID",
                    Value = RoleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "WhereField1",
                    Size = -1,
                    Value = WhereField1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WhereField2",
                    Size = -1,
                    Value = WhereField2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WhereField3",
                    Size = -1,
                    Value = WhereField3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WhereField4",
                    Size = -1,
                    Value = WhereField4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WhereField5",
                    Size = -1,
                    Value = WhereField5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Menu",
                    Size = -1,
                    Value = Menu ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WhereField6",
                    Size = -1,
                    Value = WhereField6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WhereField7",
                    Size = -1,
                    Value = WhereField7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_UsersinfoResult>("EXEC @returnValue = [dbo].[SPR_Usersinfo] @opcode, @RoleID, @UserID, @WhereField1, @WhereField2, @WhereField3, @WhereField4, @WhereField5, @Menu, @WhereField6, @WhereField7", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Spr_UsersJobsAsync(byte? OpCode, long? UserJID, long? PostsID, short? District, short? UCName, short? TehsilName, long? UserID, bool? Genderid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OpCode",
                    Value = OpCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PostsID",
                    Value = PostsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "District",
                    Value = District ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UCName",
                    Value = UCName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "TehsilName",
                    Value = TehsilName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Genderid",
                    Value = Genderid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Spr_UsersJobs] @OpCode, @UserJID, @PostsID, @District, @UCName, @TehsilName, @UserID, @Genderid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_UserWithProfileResult>> SPR_UserWithProfileAsync(byte? OpCode, long? UserPID, long? UserID, byte? RelationShipID, string FHName, string FcellNo, string CNIC, string CNICFPic, string CNICBPic, string Pic, DateTime? DOB, byte? GENDerid, bool? MaritalStatus, short? CityID, short? DistrictID, short? TehsilID, bool? Religion, string OtherReligion, bool? isHafizQuran, bool? isDisable, bool? isCAgeRelax, bool? isLocked, string UserName, string UserPassword, string FullName, string CellNo, string Address, string Email, bool? StatusID, byte? RoleID, string PostalAddress, bool? isGovtEmp, DateTime? GovtDofJoin, bool? isEduDept, DateTime? EduDofJoin, string CityName, string UCName, string TehsilName, string District, string DisablitySource, bool? isRedirect, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OpCode",
                    Value = OpCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserPID",
                    Value = UserPID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RelationShipID",
                    Value = RelationShipID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "FHName",
                    Size = 120,
                    Value = FHName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FcellNo",
                    Size = 15,
                    Value = FcellNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CNIC",
                    Size = 15,
                    Value = CNIC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CNICFPic",
                    Size = 50,
                    Value = CNICFPic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CNICBPic",
                    Size = 50,
                    Value = CNICBPic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pic",
                    Size = 50,
                    Value = Pic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "GENDerid",
                    Value = GENDerid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "MaritalStatus",
                    Value = MaritalStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CityID",
                    Value = CityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "DistrictID",
                    Value = DistrictID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "TehsilID",
                    Value = TehsilID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Religion",
                    Value = Religion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "OtherReligion",
                    Size = 50,
                    Value = OtherReligion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isHafizQuran",
                    Value = isHafizQuran ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isDisable",
                    Value = isDisable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isCAgeRelax",
                    Value = isCAgeRelax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isLocked",
                    Value = isLocked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 70,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserPassword",
                    Size = 70,
                    Value = UserPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FullName",
                    Size = 120,
                    Value = FullName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CellNo",
                    Size = 15,
                    Value = CellNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address",
                    Size = 150,
                    Value = Address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 150,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusID",
                    Value = StatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "RoleID",
                    Value = RoleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "PostalAddress",
                    Size = 150,
                    Value = PostalAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isGovtEmp",
                    Value = isGovtEmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GovtDofJoin",
                    Value = GovtDofJoin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "isEduDept",
                    Value = isEduDept ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EduDofJoin",
                    Value = EduDofJoin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "CityName",
                    Size = 150,
                    Value = CityName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UCName",
                    Size = 150,
                    Value = UCName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TehsilName",
                    Size = 150,
                    Value = TehsilName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "District",
                    Size = 150,
                    Value = District ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DisablitySource",
                    Size = 150,
                    Value = DisablitySource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isRedirect",
                    Value = isRedirect ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_UserWithProfileResult>("EXEC @returnValue = [dbo].[SPR_UserWithProfile] @OpCode, @UserPID, @UserID, @RelationShipID, @FHName, @FcellNo, @CNIC, @CNICFPic, @CNICBPic, @Pic, @DOB, @GENDerid, @MaritalStatus, @CityID, @DistrictID, @TehsilID, @Religion, @OtherReligion, @isHafizQuran, @isDisable, @isCAgeRelax, @isLocked, @UserName, @UserPassword, @FullName, @CellNo, @Address, @Email, @StatusID, @RoleID, @PostalAddress, @isGovtEmp, @GovtDofJoin, @isEduDept, @EduDofJoin, @CityName, @UCName, @TehsilName, @District, @DisablitySource, @isRedirect", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_UserWithProfilePicOnlyResult>> SPR_UserWithProfilePicOnlyAsync(byte? OpCode, long? UserID, string Pic, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OpCode",
                    Value = OpCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Pic",
                    Size = 500,
                    Value = Pic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_UserWithProfilePicOnlyResult>("EXEC @returnValue = [dbo].[SPR_UserWithProfilePicOnly] @OpCode, @UserID, @Pic", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_ViewDataResult>> SPR_ViewDataAsync(byte? opcode, int? PostsID, int? UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "PostsID",
                    Value = PostsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_ViewDataResult>("EXEC @returnValue = [dbo].[SPR_ViewData] @opcode, @PostsID, @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPR_ViewQCPrintDataResult>> SPR_ViewQCPrintDataAsync(byte? opcode, long? UserJID, int? UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcode",
                    Value = opcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserJID",
                    Value = UserJID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPR_ViewQCPrintDataResult>("EXEC @returnValue = [dbo].[SPR_ViewQCPrintData] @opcode, @UserJID, @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
